<?php
namespace app\v1\controller;

use think\facade\Request;
use think\Lang;

class Index extends Base
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

    }

    public function index($action = 'index')
    {
        switch ($action) {
            case 'index'://首页
                return $this->home();
                break;
            case 'history'://历史记录
                return $this->history();
                break;
            case 'upload'://图片上传
                return $this->upload();
                break;
            case 'currency_list': //货币列表页
                return $this->currencyList();
                break;
            case 'user':
                return $this->user();
                break;
            case 'setting':
                return $this->setting();
                break;
            case 'address_list'://地址列表
                return $this->address_list();
                break;
            case 'record':
                return $this->record();
                break;
            case 'record_detail':
                return $this->record_detail();
                break;
            case 'lang'://语言
                return $this->lang();
                break;
            case 'currency'://币种
                return $this->currency();
                break;
            default :
                return $this->home();
                break;
        }
    }

    //首页
    private function home (){
        $headers = [
            'accept-lang' => $_SERVER['HTTP_ACCEPT_LANGUAGE'],
            'Authorization' => session('authorization'),
        ];
        //首页滚动广告
        $banner = $this->http($this->base_api['url'].'/v1/ad',"get",[],$headers);
        $banner = json_decode($banner,true);
        if (key_exists('data',$banner)){
            $banner = $banner['data'];
        }else{
            $banner = array();
        }

        //第二层滚动栏目
        $brank_data = $this->http($this->base_api['url'].'/v1/dict/brand',"get",[],$headers);
        $banner_second = $brank_data;
        switch (httpData($banner_second)->errcode){
            case 0:
                //首页第二层品牌页面
                $this->assign('banner_second',json_decode($banner_second,true)['data']);  //品牌页面
                break;
            case config('error.error_server')['code']:
                //服务器错误
                return $this->fetch('error/404');
                break;
            default :
                //首页第二层品牌页面
                $this->assign('banner_second',[]);  //品牌页面
                break;
        }

        //分类数据以及数据展示数据
        $data_centen = $this->http($this->base_api['url'].'/v1/watch/toppage',"get",[],$headers);
        $watch_list = $data_centen;

        switch (httpData($watch_list)->errcode){
            case 0:
                //分类数据以及数据展示数据
                $this->assign('watch_list',$watch_list);
                $watch_list_arr = json_decode($watch_list,true);
                $this->assign('watch_list_arr',$watch_list_arr['data']);  //种类页面
                break;
            case config('error.error_server')['code']:
                //服务器错误
                return $this->fetch('error/404');
                break;
            default :
                //分类数据以及数据展示数据
                $this->assign('watch_list',[]);
                $this->assign('watch_list_arr',[]);  //种类页面
                break;
        }


        //首页banner
	    $this->assign('banner',$banner);



	    return $this->fetch('index');
    }

    //历史记录
    private function history (){
	    $p = input('p','1');
        $headers = [
            'accept-lang' => $_SERVER['HTTP_ACCEPT_LANGUAGE']
        ];
        $param['p'] = $p;
        $param = http_build_query($param);
        //获取历史数据
        $history_data = $this->http($this->base_api['url']."/v1/watch/history?$param","get",[],$headers);
        switch (httpData($history_data)->errcode){
            case 0:
                echo $history_data;
                break;
            case config('error.error_server')['code']:
                //服务器错误
                echo json_encode(['errcode'=>config('error.error_server')['code']]);
                break;
            default :
                echo $history_data;
                break;
        }

    }


    //货币列表
    private function currencyList (){
        $method = input('method',1);//1:跳模版 2:接口数据
        if ($method == '2'){
            $headers = [
                'accept-lang' => $_SERVER['HTTP_ACCEPT_LANGUAGE'],
            ];
            //货币列表
            $currency = $this->http($this->base_api['url']."/v1/currency?list=1","get",[],$headers);
            switch (httpData($currency)->errcode){
                case 0:
                    echo $currency;
                    break;
                case config('error.error_server')['code']:
                    //服务器错误
                    echo json_encode(['errcode'=>config('error.error_server')['code']]);
                    break;
                default :
                    echo ['errcode'=>1];;
                    break;
            }
        }else{
            return $this->fetch('currency');
        }
    }

    //上传图片
    private function upload(){
        if (!empty($_FILES['file'])){
            $api = $this->base_api;
            $headers = [
                'accept-lang' => $_SERVER['HTTP_ACCEPT_LANGUAGE'],
                'Authorization' => session('authorization'),
            ];
            if ($_FILES['file']['error']>0){
                return json(apiError('error_upload'));
            }
            //生成文件名
            $files_name = sha1('swisstimevip_'.time().rand(1,9999));
            //图片类型
            $type = $_FILES['file']['type'];
            //图片允许类型
            $allow_type = ['jpg','jpeg','png'];
            $type_arr = explode('/',$type);
            $type_arr[1] = strtolower($type_arr[1]);
            //判断上传文件的类型是否错误
            if (!in_array($type_arr[1],$allow_type)){
                echo json_encode(['errcode'=>1,'msg'=>\think\facade\Lang::get('error_type')]);exit;
            }
            //生成新的文件名
            $files_name = $files_name.'.'.$type_arr[1];
            $size = $_FILES['file']['size'];
            if ($size > 10485760){
                echo json_encode(['errcode'=>1,'msg'=>\think\facade\Lang::get('error_size')]);exit;
            }
            //移入生成文件到新的文件架
            move_uploaded_file($_FILES['file']['tmp_name'],'./'.$files_name);
            $data['img'] = new \CurlFile(realpath('./'.$files_name));
            $r = $this -> http($this->base_api['url']."/v1/upload", 'POST', $data , $headers,true);//上传api
            if(file_exists('./'.$files_name)){
                unlink('./'.$files_name);
            }
            switch (httpData($r)->errcode){
                case 0:
                    //上传成功
                    echo $r;
                    break;
                case config('error.error_server')['code']:
                    //服务器错误
                    echo json_encode(['errcode'=>config('error.error_server')['code']]);
                    break;
                default :
                    //上传失败
                    echo json_encode(['errcode'=>1,'msg'=>\think\facade\Lang::get('error_uplode')]);
                    break;
            }
        }else{
            echo json_encode(['errcode'=>1,'msg'=>\think\facade\Lang::get('error_uplode')]);
        }

    }

    private function setting()
    {
        return $this->fetch('setting');
    }

    private function currency()
    {
        return $this->fetch('currency');
    }


    //基本信息-用户信息
    private function user(){
	    if(strtolower(Request::method()) == 'get'){
	           return $this->fetch('user');
        }else{
            $info = Request::param();
            $headers = [
                'accept-lang' => $_SERVER['HTTP_ACCEPT_LANGUAGE'],
                'Authorization' => session('authorization'),
            ];
            //修改用户信息
            $set_userinfo = $this->http($this->base_api['url']."/v1/user/info",'put',$info,$headers);
            switch (httpData($set_userinfo)->errcode){
                case 0:
                    echo json_encode(['errcode'=>0]);
                    break;
                case config('error.error_server')['code']:
                    //服务器错误
                    echo json_encode(['errcode'=>config('error.error_server')['code']]);
                    break;
                default :
                    //修改失败
                    echo json_encode(['errcode'=>1,'msg'=>\think\facade\Lang::get('error_set')]);
                    break;
            }
        }
    }

    //基本信息-语言设置
    private function lang()
    {
        $method = input('method','1');//1 :模板 2:接口请求
        if ($method == 1){
            return $this->fetch('lang');
        }else{
            $lang = input('lang_type','en-us');
            $lang_arr = ['de-de','en-us','fr-fr','zh-cn','zh-hk'];
            if (!in_array($lang,$lang_arr)){
                $lang = 'en-us';
            }
            $res = file_put_contents('./lang.txt',$lang);
            if ($res){
                echo json_encode(['errcode'=>0]);
            }else{
                echo json_encode(['errcode'=>1]);
            }
        }

    }

    //购买记录
    private function record()
    {
        $method = input('method','1'); //1:模板输出  2:接口
        if ($method == 2){
            $headers = [
                'accept-lang' => $_SERVER['HTTP_ACCEPT_LANGUAGE'],
                'Authorization' => session('authorization'),
            ];
            //pay待付款，paid已付款
            $param['type'] = input('type',null);
            $param['p']    = input('p','1');
            $param = http_build_query($param);
            $record = $this->http($this->base_api['url']."/v1/order/watch?$param", 'get',[] , $headers);
            switch (httpData($record)->errcode){
                case 0:
                    echo $record;
                    break;
                case config('error.error_server')['code']:
                    //服务器错误
                    echo json_encode(['errcode'=>config('error.error_server')['code']]);
                    break;
                default :
                    //失败
                    echo json_encode(['errcode'=>1]);
                    break;
            }
        }else{
            return $this->fetch('record');
        }
    }


    //购买记录详情
    private function record_detail()
    {
        $headers = [
            'accept-lang' => $_SERVER['HTTP_ACCEPT_LANGUAGE'],
            'Authorization' => session('authorization'),
        ];
        $bill_sn = input('bill_sn','');
        //订单详情
        $order_info = $this->http($this->base_api['url']."/v1/order/info?bill_sn=$bill_sn", 'get',[] , $headers);
        switch (httpData($order_info)->errcode){
            case 0:
                $order_info = json_decode($order_info,true);
                $this->assign('order_info',$order_info);
                return $this->fetch('record_detail');
                break;
            case config('error.error_server')['code']:
                //服务器错误
                return $this->fetch('error/404');
                break;
            default :
                $order_info = json_decode($order_info,true);
                $this->assign('order_info',$order_info);
                return $this->fetch('record_detail');
                break;
        }
    }
}
