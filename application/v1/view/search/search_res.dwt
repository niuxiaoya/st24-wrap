{include file="public/public_header"}
{load file='/static/css/search_res.css'}
{load file='/static/js/public_f.js'}
</head>
<body>
<div id="app">
    <header class="header">
        {{lists.page.total_count}}{$Think.lang.search_res}
    </header>
    <main class="home_main">
        <ul>
            <li v-for="item in lists.list" @click="openDetail(item)">
                <img class="cover" :src="item.cover_pic">
                <img class="like" :src="item.is_collection==0?'/static/image/home/no_like.png':'/static/image/home/like.png'"
                     @click.stop="likeClick(item)">
                <div>
                    <h5>
                        {{item.title}}
                    </h5>
                    <span>{{item.price}}</span>
                </div>
            </li>
            <infinite-loading :on-infinite="onInfinite" ref="infiniteLoading">
                <span slot="no-more"><span v-if="lists.page.total_pages>1">{$Think.lang.no_more}</span></span>
                <span slot="no-results">{$Think.lang.no_more}</span>
            </infinite-loading>
        </ul>
    </main>
    <div class="screen">
        <ul>
            <li @click="location.href='/search/screen'"><img src="/static/image/search/screen.png">{$Think.lang.screen}
            </li>
            <li @click="sortPop = true"><img src="/static/image/search/sort.png">{$Think.lang.sort}</li>
        </ul>
    </div>
    <mt-popup
            v-model="sortPop"
            class="sortStyle"
            position="bottom">
        <ul>
            <li v-for="(item,index) in sortList" :class="{active:sort==item.val}" @click="sortClick(item,index)">
                {{item.name}}
                <img :src="sort==item.val?'/static/image/search/searchActive.png':''">
            </li>
        </ul>
    </mt-popup>
</div>
<script src="https://cdn.jsdelivr.net/npm/vue"></script>
<script src="https://unpkg.com/mint-ui/lib/index.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
{load file='/static/js/vue-infinite-loading.js'}
<script>
    {include file="public/axios" }
    new Vue({
        el: '#app',
        data: {
            sort: '',
            sortPop: false,
            sortList: [
                {
                    name: '{$Think.lang.all}',
                    val: ''
                },
                {
                    name: '{$Think.lang.popularity}',
                    val: 'pv'
                },
                {
                    name: '{$Think.lang.price_hightolow}',
                    val: 'price_h'
                },
                {
                    name: '{$Think.lang.price_lowtohigh}',
                    val: 'price_l'
                }
            ],
            lists: {
                list: [],
                page: {
                    p: 0,
                    total_count:0,
                    total_pages: 1,
                }
            },
        },
        methods: {
            openDetail(item) {
                location.href = `/like/detail?gid=${item.gid}`
            },
            sortClick(item, index) {
                this.sort = item.val
                this.sortPop = false
                this.lists = {
                    list: [],
                    page: {
                        p: 0,
                        total_count:0,
                        total_pages: 1,
                    }
                }
                this.$refs.infiniteLoading.$emit('$InfiniteLoading:reset');
            },
            likeClick(item){
                if(parseInt(item.is_collection)==0){
                    service.post('/like/index',{method:2,gid:item.gid}).then(res=>{
                        if(parseInt(res.data.errcode)==0){
                            item.is_collection=1
                        }
                    }).catch(err=>{
                        console.log(err)
                    })
                }else{
                    service.delete('/like/index',{params:{method:3,gid:item.gid}}).then(res=>{
                        if(parseInt(res.data.errcode)==0){
                            item.is_collection=0
                        }
                    }).catch(err=>{
                        console.log(err)
                    })
                }
            },
            onInfinite() {
                setTimeout(() => {
                    let self = this
                    if (self.lists.page.p > self.lists.page.total_pages) {
                        this.$refs.infiniteLoading.$emit('$InfiniteLoading:complete')
                        return false
                    }
                    self.lists.page.p++
                    let post = {
                        category_code:getUrlData('category_code'),
                        price_l: getUrlData('price_l')||0,
                        price_h: getUrlData('price_h')||-1,
                        brand_id: getUrlData('brand_id'),
                        material_id: getUrlData('material_id'),
                        shape_id:  getUrlData('shape_id'),
                        gender_id: getUrlData('gender_id'),
                        function_id: getUrlData('function_id'),
                        fineness_id: getUrlData('fineness_id'),
                        diameter_l:getUrlData('diameter_l'),
                        diameter_h:getUrlData('diameter_h'),
                        title:getUrlData('title'),
                        order:self.sort,
                        p:self.lists.page.p
                    }
                    service.get('/search/search_res_data',{params:post}).then(res=>{
                        if(parseInt(res.data.errcode)==0){
                            self.lists.list = self.lists.list.concat(res.data.data)
                            self.lists.page = res.data.page
                            self.$refs.infiniteLoading.$emit('$InfiniteLoading:loaded');
                        }else{
                            self.$refs.infiniteLoading.$emit('$InfiniteLoading:complete');
                        }
                    }).catch(err=>{
                        console.log(err)
                        self.$refs.infiniteLoading.$emit('$InfiniteLoading:complete');
                    })
                }, 1000);
            },
        },
        mounted() {

        }
    });
</script>
</body>
</html>